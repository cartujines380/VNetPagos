@using VisaNet.Common.Resource.Enums
@using VisaNet.Common.Resource.Helpers
@using VisaNet.Common.Resource.Presentation
@using VisaNet.Domain.EntitiesDtos.Enums
@model VisaNet.Domain.EntitiesDtos.TableFilters.DailyConciliationFilterDto
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@PresentationAdminStrings.Reports_DailyConciliation_Title</h2>
@using (Html.BeginForm("AjaxHandler", "Conciliation", FormMethod.Post, new Dictionary<string, object> { { "id", "form" } }))
{
    <div class="row">
        <div class="col-md-4">
            <label>@PresentationAdminStrings.From</label>
            @Html.EditorFor(m => m.From, new { @class = "w100" })
        </div>
        <div class="col-md-4">
            <label>@PresentationWebStrings.Filters_To</label>
            @Html.EditorFor(m => m.To, new { @class = "w100" })
        </div>
        <div class="col-md-4">
            <label>@PresentationAdminStrings.Reports_Conciliation_State</label>
            <div class="selectMask w100">
                @Html.DropDownListFor(model => model.State, EnumHelpers.ConvertToSelectList(typeof(ConciliationStateDto), EnumsStrings.ResourceManager), "Todos", new Dictionary<string, object> { { "style", "width: 100%; height: 100%; color:#999" }, { "class", "form-control" } })
            </div>
        </div>
        <div class="col-md-4">
            <label>@PresentationAdminStrings.Reports_Conciliation_Application</label>
            <div class="selectMask w100 selectMultiple">
                @Html.DropDownListFor(model => model.Applications, EnumHelpers.ConvertToSelectList(typeof(ConciliationAppDto), EnumsStrings.ResourceManager), new Dictionary<string, object> { { "class", "selectpicker" }, { "multiple", "multiple" }, { "data-selected-text-format", "count>3" }, { "data-actions-box", "true" }, { "data-icon-base", "fa" }, { "data-tick-icon", "fa-check" }, { "data-select-all-text", "Todos" }, { "data-deselect-all-text", "Ninguno" }, { "data-none-selected-text", "Ninguno seleccionado" }, { "data-count-selected-text", "Seleccionados {0} de {1}" } })
            </div>
        </div>
        <div class="col-md-4">
            <label>@PresentationAdminStrings.Reports_Conciliation_Origin</label>
            <div class="selectMask w100">
                @Html.DropDownListFor(model => model.Origin, EnumHelpers.ConvertToSelectList(typeof(ConciliationOriginDto), EnumsStrings.ResourceManager), "Todos", new Dictionary<string, object> { { "style", "width: 100%; height: 100%; color:#999" }, { "class", "form-control" } })
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="col-xs-6 p5l pr0">
                <a class="btn btn-default btn-standar mt10 w100" id="execute">@PresentationCoreMessages.Common_Execute</a>
            </div>
        </div>
    </div>
    <br />

    <br />
}

<div class="greenCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_Ok</span>
<div class="yellowCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_Error</span>
<div class="redCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_NotFound</span>
<div class="blueCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_Checked</span>
<div class="greyCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_DoesNotApply</span>

<div class="row">
    <div class="col-lg-12">
        <div class="table-responsive">
            <table id="table" class="table table-bordered table-striped table-hover tablesorter">
                <thead>
                    <tr>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Date
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_VNP
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_External
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Site
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Cybersource
                        </th>
                        <th>
                            @PresentationAdminStrings.Reports_Conciliation_Banred
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Sistarbanc
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Sucive
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Tc33
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Batch
                        </th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        "use strict";

        var oTable;

        $(document).ready(function() {

            $('#Applications').selectpicker();
            $('#Applications').selectpicker('selectAll');

            function externalFilters(aoData) {
                aoData.push({ "name": "From", "value": $("#@Html.IdFor(m => m.From)").val() });
                aoData.push({ "name": "To", "value": $("#@Html.IdFor(m => m.To)").val() });
                aoData.push({ "name": "State", "value": $("#@Html.IdFor(m => m.State)").val() });
                aoData.push({ "name": "Applications", "value": $("#@Html.IdFor(m => m.Applications)").val() });
            }

            function drawTable() {
                oTable = applyDatatableExternalFilters($('#table'),
                    null,
                    [
                        {
                            "mDataProp": "Date",
                            "bSearchable": false,
                            "bSortable": false,
                            "fnRender": function(oObj) {
                                return oObj.aData.Date +
                                    "<input class='data' type='hidden' value='" +
                                    JSON.stringify(oObj.aData) +
                                    "'/>";
                            }
                        },
                        {
                            "mDataProp": "TotalPortal",
                            "bSearchable": false,
                            "bSortable": false
                        },
                        {
                            "mDataProp": "TotalExternas",
                            "bSearchable": false,
                            "bSortable": false
                        },
                        {
                            "sName": "PortalState",
                            "sClass": "column-icon",
                            "sDefaultContent": "",
                            "bSearchable": false,
                            "bSortable": false,
                            "fnRender": function(oObj) {
                                if (oObj.aData.PortalState == '@((int) ConciliationStateDto.Ok)')
                                    return '<div class="greenCircle no-pointer"></div>';
                                if (oObj.aData.PortalState == '@((int) ConciliationStateDto.Difference)')
                                    return '<div class="yellowCircle no-pointer"></div>';
                                if (oObj.aData.PortalState == '@((int) ConciliationStateDto.NotFound)')
                                    return '<div class="redCircle no-pointer"></div>';
                                if (oObj.aData.PortalState == '@((int) ConciliationStateDto.Checked)')
                                    return '<div class="blueCircle no-pointer"></div>';
                                if (oObj.aData.PortalState == '@((int) ConciliationStateDto.DoesNotApply)')
                                    return '<div class="greyCircle no-pointer"></div>';
                            }
                        },
                        {
                            "sName": "CybersourceState",
                            "sClass": "column-icon",
                            "sDefaultContent": "",
                            "bSearchable": false,
                            "bSortable": false,
                            "fnRender": function(oObj) {
                                if (oObj.aData.CybersourceState == '@((int) ConciliationStateDto.Ok)')
                                    return '<div class="greenCircle"></div>';
                                if (oObj.aData.CybersourceState == '@((int) ConciliationStateDto.Difference)')
                                    return '<div class="yellowCircle"></div>';
                                if (oObj.aData.CybersourceState == '@((int) ConciliationStateDto.NotFound)')
                                    return '<div class="redCircle"></div>';
                                if (oObj.aData.CybersourceState == '@((int) ConciliationStateDto.Checked)')
                                    return '<div class="blueCircle"></div>';
                                if (oObj.aData.CybersourceState == '@((int) ConciliationStateDto.DoesNotApply)')
                                    return '<div class="greyCircle"></div>';
                            }
                        },
                        {
                            "sName": "BanredState",
                            "sClass": "column-icon",
                            "sDefaultContent": "",
                            "bSearchable": false,
                            "bSortable": false,
                            "fnRender": function(oObj) {
                                if (oObj.aData.BanredState == '@((int) ConciliationStateDto.Ok)')
                                    return '<div class="greenCircle"></div>';
                                if (oObj.aData.BanredState == '@((int) ConciliationStateDto.Difference)')
                                    return '<div class="yellowCircle"></div>';
                                if (oObj.aData.BanredState == '@((int) ConciliationStateDto.NotFound)')
                                    return '<div class="redCircle"></div>';
                                if (oObj.aData.BanredState == '@((int) ConciliationStateDto.Checked)')
                                    return '<div class="blueCircle"></div>';
                                if (oObj.aData.BanredState == '@((int) ConciliationStateDto.DoesNotApply)')
                                    return '<div class="greyCircle"></div>';
                            }
                        },
                        {
                            "sName": "SistarbancState",
                            "sClass": "column-icon",
                            "sDefaultContent": "",
                            "bSearchable": false,
                            "bSortable": false,
                            "fnRender": function(oObj) {
                                if (oObj.aData.SistarbancState == '@((int) ConciliationStateDto.Ok)')
                                    return '<div class="greenCircle"></div>';
                                if (oObj.aData.SistarbancState == '@((int) ConciliationStateDto.Difference)')
                                    return '<div class="yellowCircle"></div>';
                                if (oObj.aData.SistarbancState == '@((int) ConciliationStateDto.NotFound)')
                                    return '<div class="redCircle"></div>';
                                if (oObj.aData.SistarbancState == '@((int) ConciliationStateDto.Checked)')
                                    return '<div class="blueCircle"></div>';
                                if (oObj.aData.SistarbancState == '@((int) ConciliationStateDto.DoesNotApply)')
                                    return '<div class="greyCircle"></div>';
                            }
                        },
                        {
                            "sName": "SuciveState",
                            "sClass": "column-icon",
                            "sDefaultContent": "",
                            "bSearchable": false,
                            "bSortable": false,
                            "fnRender": function(oObj) {
                                if (oObj.aData.SuciveState == '@((int) ConciliationStateDto.Ok)')
                                    return '<div class="greenCircle"></div>';
                                if (oObj.aData.SuciveState == '@((int) ConciliationStateDto.Difference)')
                                    return '<div class="yellowCircle"></div>';
                                if (oObj.aData.SuciveState == '@((int) ConciliationStateDto.NotFound)')
                                    return '<div class="redCircle"></div>';
                                if (oObj.aData.SuciveState == '@((int) ConciliationStateDto.Checked)')
                                    return '<div class="blueCircle"></div>';
                                if (oObj.aData.SuciveState == '@((int) ConciliationStateDto.DoesNotApply)')
                                    return '<div class="greyCircle"></div>';
                            }
                        }, {
                            "sName": "Tc33State",
                            "sClass": "column-icon",
                            "sDefaultContent": "",
                            "bSearchable": false,
                            "bSortable": false,
                            "fnRender": function(oObj) {
                                if (oObj.aData.Tc33State == '@((int) ConciliationStateDto.Ok)')
                                    return '<div class="greenCircle"></div>';
                                if (oObj.aData.Tc33State == '@((int) ConciliationStateDto.Difference)')
                                    return '<div class="yellowCircle"></div>';
                                if (oObj.aData.Tc33State == '@((int) ConciliationStateDto.NotFound)')
                                    return '<div class="redCircle"></div>';
                                if (oObj.aData.Tc33State == '@((int) ConciliationStateDto.Checked)')
                                    return '<div class="blueCircle"></div>';
                                if (oObj.aData.Tc33State == '@((int) ConciliationStateDto.DoesNotApply)')
                                    return '<div class="greyCircle"></div>';
                            }
                        },
                        {
                            "sName": "BatchState",
                            "sClass": "column-icon",
                            "sDefaultContent": "",
                            "bSearchable": false,
                            "bSortable": false,
                            "fnRender": function(oObj) {
                                if (oObj.aData.BatchState == '@((int) ConciliationStateDto.Ok)')
                                    return '<div class="greenCircle"></div>';
                                if (oObj.aData.BatchState == '@((int) ConciliationStateDto.Difference)')
                                    return '<div class="yellowCircle"></div>';
                                if (oObj.aData.BatchState == '@((int) ConciliationStateDto.NotFound)')
                                    return '<div class="redCircle"></div>';
                                if (oObj.aData.BatchState == '@((int) ConciliationStateDto.Checked)')
                                    return '<div class="blueCircle"></div>';
                                if (oObj.aData.BatchState == '@((int) ConciliationStateDto.DoesNotApply)')
                                    return '<div class="greyCircle"></div>';
                            }
                        }
                    ],
                    '@Url.Action("AjaxHandler", "Conciliation")',
                    externalFilters,
                    [[0, "desc"]]);
            }

            $("#execute").click(function(e) {
                e.preventDefault();
                drawTable();
                oTable.fnFilter();
            });

            var selectedRowData = undefined;
            var selectedApp = undefined;

            $("#table").on("click",
                "td.column-icon",
                function() {
                    if ($(this.children).hasClass("no-pointer")) {
                        return;
                    }
                    var data = JSON.parse($("input[type='hidden']", this.parentNode).val());
                    var tds = $("td", this.parentNode);
                    var position = tds.index(this) - 3; //Resto 3 porque es el offset que tiene en la tabla

                    selectedRowData = data;
                    selectedApp = position;

                    $.ajax({
                        type: 'POST',
                        url: "@Url.Action("DailyDetail", "Conciliation")",
                        data: JSON.stringify({ app: position, detail: data }),
                        contentType: 'application/json',
                        success: function(data) {
                            $(".modal-body", "#detailModal").html(data);
                            $("#detailModal").modal("show");
                        },
                        error: function(xhr, data, message) {
                            ShowNotification('Error', 'No fue posible cargar el detalle', 'error');
                        },
                        dataType: "html"
                    });
                });

            function loadFilterFormData(state) {
                var date = selectedRowData.Date;
                var app = selectedApp;
                $("#From", "#detailForm").val(date);
                $("#To", "#detailForm").val(date);
                $("#Applications", "#detailForm").val(app);
                $("#State", "#detailForm").val(state);
            }

            $("#detailModal").on("click",
                "#conciliationDetailOk",
                function() {
                    loadFilterFormData("1");
                    $("#detailForm").submit();
                });

            $("#detailModal").on("click",
                "#conciliationDetailDiff",
                function() {
                    loadFilterFormData("2");
                    $("#detailForm").submit();
                });

            $("#detailModal").on("click",
                "#conciliationDetailChecked",
                function() {
                    loadFilterFormData("4");
                    $("#detailForm").submit();
                });

            $("#detailModal").on("click",
                "#conciliationDetailError",
                function() {
                    loadFilterFormData("3");
                    $("#detailForm").submit();
                });


        });
    </script>
}

<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" id="detailModal">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4>@PresentationAdminStrings.Reports_Conciliation_Details</h4>
            </div>
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>

<form id="detailForm" action="@Url.Action("Index", "ReportsConciliation")" method="POST">
    <input type="hidden" name="From" id="From" />
    <input type="hidden" name="To" id="To" />
    <input type="hidden" name="State" id="State" />
    <input type="hidden" name="Applications" id="Applications" />
</form>