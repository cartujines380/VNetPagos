@using VisaNet.Common.Resource.Presentation
@using VisaNet.Common.Security.Entities.Enums
@using VisaNet.Presentation.Administration.MvcHtmlHelpers
@model VisaNet.Domain.EntitiesDtos.TableFilters.ServiceFilterDto

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@PresentationAdminStrings.Services</h2>

<div class="row">
    <div class="col-md-3">
        <label>@PresentationAdminStrings.Service_ServiceName</label>
        @Html.TextBoxFor(m => m.Name, new { @class = "form-control w100", @placeholder = "Ingrese el nombre a buscar", autocomplete = "off" })
    </div>
    <div class="col-md-3">
        <label>@PresentationAdminStrings.Service_ServiceCateogry</label>
        @Html.DropDownListFor(x => x.ServiceCategoryId, (ICollection<SelectListItem>)ViewBag.Categories, "Seleccione una categoría", new { @class = "form-control w100", style = "color:#999" })
    </div>
    <div class="col-md-3">
        <label>@PresentationAdminStrings.Service_ServiceGateway</label>
        @Html.DropDownListFor(x => x.Gateway, (ICollection<SelectListItem>)ViewBag.Gateways, new { @class = "form-control w100", style = "color:#999" })
    </div>
    <div class="col-md-3">
        <label>@PresentationAdminStrings.Service_ServiceContainer</label>
        @Html.DropDownListFor(x => x.ServiceContainerId, (ICollection<SelectListItem>)ViewBag.ServicesLigthList, new { @class = "form-control w100", style = "color:#999" })
    </div>
</div>

<div class="row">
    <div class="col-md-2">
        <a class="btn btn-default btn-standar mt10 w100" id="execute">@PresentationAdminStrings.Common_Search</a>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h2></h2>
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-hover tablesorter">
                <thead>
                    <tr>
                        <th>@PresentationAdminStrings.Service <i class=""></i></th>
                        <th>@PresentationAdminStrings.Category <i class=""></i></th>
                        <th>@PresentationAdminStrings.Gateway <i class=""></i></th>
                        <th>@PresentationAdminStrings.Service_Container<i class=""></i></th>
                        <th><i class=""></i>Detalle</th>
                        <th>@PresentationAdminStrings.Status<i class=""></i></th>
                        <th><i class=""></i>Editar</th>
                        <th><i class=""></i>Eliminar</th>
                        <th><i class=""></i>Test pasarelas</th>
                        <th><i class=""></i>Test Cybersource</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        @Html.ActionActionLink(Actions.ServiceCreate, "<i class=\"icon-plus\"></i>" + PresentationAdminStrings.Create, new Dictionary<string, object> { { "Class", "btn btn-default" }, { "id", "btnNew" } })
    </div>
</div>

@Html.Partial("_DeleteLightbox")
@Html.Partial("_EditLightbox")

<div id="divTestGateways"></div>
<div id="divTestCybersource"></div>
<div id="divTestCybersourceCallback"></div>


<script type="text/javascript">
    $(document).ready(function () {
        var dataTableFilters;
        var callbackTestCsResponse = '@TempData["ResponseTestSecureAcceptance"]';
        var callbackTestCsResponseMsg = '@TempData["ResponseTestSecureAcceptanceMessage"]';
        var callbackServiceName = '@TempData["ResponseTestSecureAcceptanceServiceName"]';
        var callbackServiceId = '@TempData["ResponseTestSecureAcceptanceServiceId"]';

        function externalFilters(aoData) {
            aoData.push({ "name": "Name", "value": $("#@Html.IdFor(m => m.Name)").val() });
            aoData.push({ "name": "ServiceCategoryId", "value": $("#@Html.IdFor(m => m.ServiceCategoryId)").val() });
            aoData.push({ "name": "ServiceContainerId", "value": $("#@Html.IdFor(m => m.ServiceContainerId)").val() });
            aoData.push({ "name": "Gateway", "value": $("#@Html.IdFor(m => m.Gateway)").val() });
        }

        dataTableFilters = applyDatatableExternalFilters($('table'),
                [0, 0, 0, 0, 0],
                [
                    { "mDataProp": "Name" },
                    { "mDataProp": "ServiceCategoryName" },                    
                    { "mDataProp": "Gateways", "bSortable": false },
                    //{ "mDataProp": "ServiceContainer" },
                    {
                        "sName": "ServiceContainer",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": true,
                        "bSortable": true,
                        "fnRender": function (oObj) {
                            return "<a target='_blank' href='@Url.Action("Index", "ServiceContainer")?ServiceContainerName=" + oObj.aData.ServiceContainer + "'>" + oObj.aData.ServiceContainer + "</a>";
                        }
                    },
                    {
                        "sName": "Details",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            return '@Html.ActionGridActionLink(Actions.ServiceDetails, "<i class=\"fa fa-search\"></i>", new Dictionary<string, object> { { "Class", "btn-editar" } })';
                        }
                    },
                     {
                         "sName": "Details",
                         "sClass": "column-icon",
                         "sDefaultContent": "",
                         "bSearchable": false,
                         "bSortable": true,
                         "fnRender": function (oObj) {
                             return oObj.aData.StatusActive ?
                                 '@Html.ActionGridActionLink(Actions.ServiceEdit, "<i class=\"fa fa-toggle-on fa-2x\"></i>", new Dictionary<string, object> { { "Class", "btn-change" } })' :
                                 '@Html.ActionGridActionLink(Actions.ServiceEdit, "<i class=\"fa fa-toggle-off fa-2x\"></i>", new Dictionary<string, object> { { "Class", "btn-change" } })';
                         }
                     },
                    {
                        "sName": "Edit",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            return '@Html.ActionGridActionLink(Actions.ServiceEdit, "<i class=\"fa fa-edit\"></i>", new Dictionary<string, object> { { "Class", "btn-editar" } })';
                        }
                    },
                    {
                        "sName": "Borrar",
                        "sClass": "column-icon",
                        //esto le indica que no lo mapee con el array
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            return '@Html.ActionGridActionLink(Actions.ServiceDelete, "<i class=\"fa fa-trash-o\"></i>", new Dictionary<string, object> { { "Class", "btn-editar lnkDelete" } })';
                        }
                    },
                    {
                        "sName": "TestGateways",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            return '@Html.ActionGridActionLink(Actions.ServiceTestGateways, "<i class=\"fa fa-bolt\"></i>", new Dictionary<string, object> { { "Class", "btn-editar lnkTestGateways" } })';
                        }
                    },
                    {
                        "sName": "TestCybersource",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            return '@Html.ActionGridActionLink(Actions.ServiceTestCybersource, "<i class=\"fa fa-credit-card\"></i>", new Dictionary<string, object> { { "Class", "btn-editar lnkTestCybersource" } })';
                        }
                    }
                ],
                '@Url.Action("AjaxHandler", "Service")', externalFilters, null, [[0, "asc"]]);


        $("#execute").click(function (e) {
            e.preventDefault();
            dataTableFilters.fnFilter();
        });


        $('table').on("click", ".lnkDelete", function (e) {
            if (!$(this).hasClass("disabled")) {
                e.preventDefault();
                tr = $(this).parents("tr");
                var lb = $('#lbConfirmDelete');
                $("#lbHiddenUrl", lb).val($(this).attr("href"));
                lb.modal();
            }
        });

        $('table').on("click", ".btn-change", function (e) {
            if (!$(this).hasClass("disabled")) {
                e.preventDefault();
                tr = $(this).parents("tr");
                var lb = $('#lbConfirmChange');
                var url = $(this).attr("href").split('/');
                $("#lbChangeHiddenUrl", lb).val("Service/ChangeState/" + url[url.length - 1]);
                lb.modal();
            }
        });

        $('table').on("click", ".lnkTestGateways", function (e) {
            if (!$(this).hasClass("disabled")) {
                e.preventDefault();
                var url = $(this).attr("href").split('/');
                var serviceId = url[url.length - 1];

                $.ajax({
                    dataType: 'json',
                    type: "POST",
                    url: "@Url.Action("LoadTestGatewaysData", "Service")",
                    data: { serviceId: serviceId },
                    success: function (ret) {
                        if (ret.ResponseType == RESPONSE.SUCCESS) {
                            $("#divTestGateways").html(ret.Content);
                            var lb = $('#lbTestGateways');
                            lb.modal();
                        }
                        if (ret.ResponseType == RESPONSE.ERROR) {
                            ShowNotification(ret.Title, ret.Message, 'error');
                        }
                    }
                });
            }
        });

        $('table').on("click", ".lnkTestCybersource", function (e) {
            e.preventDefault();
            var url = $(this).attr("href").split('/');
            var serviceId = url[url.length - 1];
            if ((callbackTestCsResponse == "SUCCESS" || callbackTestCsResponse == "ERROR") && serviceId == callbackServiceId) {
                $.ajax({
                    dataType: 'json',
                    type: "POST",
                    url: "@Url.Action("LoadTestCybersourceCallbackData", "Service")",
                    data: { serviceName: callbackServiceName, result: callbackTestCsResponse, message: callbackTestCsResponseMsg },
                    success: function (ret) {
                        if (ret.ResponseType == RESPONSE.SUCCESS) {
                            alert(ret.Content);
                            var msg = ret.Content.replace(/\|/g, "<Br />");
                            $("#divTestCybersourceCallback").html(msg);
                            var lb = $('#lbTestCybersourceCallback');
                            lb.modal();
                            callbackTestCsResponse = '';
                        }
                        if (ret.ResponseType == RESPONSE.ERROR) {
                            ShowNotification(ret.Title, ret.Message, 'error');
                        }
                    }
                });
            } else {
                if (!$(this).hasClass("disabled")) {
                    $.ajax({
                        dataType: 'json',
                        type: "POST",
                        url: "@Url.Action("LoadTestCybersourceData", "Service")",
                        data: { serviceId: serviceId },
                        success: function (ret) {
                            if (ret.ResponseType == RESPONSE.SUCCESS) {
                                $("#divTestCybersource").html(ret.Content);
                                var lb = $('#lbTestCybersource');
                                lb.modal();
                            }
                            if (ret.ResponseType == RESPONSE.ERROR) {
                                ShowNotification(ret.Title, ret.Message, 'error');
                            }
                        }
                    });
                }
            }
        });
    });

</script>
