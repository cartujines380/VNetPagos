@using VisaNet.Common.Resource.Enums
@using VisaNet.Common.Resource.Helpers
@using VisaNet.Common.Resource.Presentation
@using VisaNet.Domain.Entities.Enums
@using VisaNet.Domain.EntitiesDtos.Enums
@model VisaNet.Domain.EntitiesDtos.TableFilters.ReportsConciliationFilterDto

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@PresentationAdminStrings.Reports_Conciliation_Title</h2>
@using (Html.BeginForm("AjaxHandler", "ReportsConciliation", FormMethod.Post, new Dictionary<string, object> { { "id", "form" } }))
{
    <div class="row">
        <div class="col-md-2">
            <label>@PresentationAdminStrings.From</label>
            @Html.EditorFor(m => m.From, new { @class = "w100" })
        </div>
        <div class="col-md-2">
            <label>@PresentationWebStrings.Filters_To</label>
            @Html.EditorFor(m => m.To, new { @class = "w100" })
        </div>
        <div class="col-md-4">
            <label>@PresentationAdminStrings.Reports_Conciliation_TransactionNumber</label>
            <div class="selectMask w100">
                @Html.TextBoxFor(m => m.RequestId, new { @class = "form-control w100", })
            </div>
        </div>
        <div class="col-md-4">
            <label>Número de transacción para pasarela</label>
            <div class="selectMask w100">
                @Html.TextBoxFor(m => m.UniqueIdenfifier, new { @class = "form-control w100", })
            </div>
        </div>
        <div class="col-md-2">
            <label>@PresentationAdminStrings.Reports_Conciliation_State</label>
            <div class="selectMask w100 selectMultiple">
                @Html.DropDownListFor(model => model.State, EnumHelpers.ConvertToSelectList(typeof(ConciliationStateDto), EnumsStrings.ResourceManager), new Dictionary<string, object> { { "class", "selectpicker" }, { "multiple", "multiple" }, { "data-selected-text-format", "count>3" }, { "data-actions-box", "true" }, { "data-icon-base", "fa" }, { "data-tick-icon", "fa-check" }, { "data-select-all-text", "Todos" }, { "data-deselect-all-text", "Ninguno" }, { "data-none-selected-text", "Ninguno seleccionado" }, { "data-count-selected-text", "Seleccionados {0} de {1}" } })
            </div>
        </div>
        <div class="col-md-2">
            <label>@PresentationAdminStrings.Reports_Conciliation_Application</label>
            <div class="selectMask w100 selectMultiple">
                @Html.DropDownListFor(model => model.Applications, EnumHelpers.ConvertToSelectList(typeof(ConciliationAppDto), EnumsStrings.ResourceManager), new Dictionary<string, object> { { "class", "selectpicker" }, { "multiple", "multiple" }, { "data-selected-text-format", "count>3" }, { "data-actions-box", "true" }, { "data-icon-base", "fa" }, { "data-tick-icon", "fa-check" }, { "data-select-all-text", "Todos" }, { "data-deselect-all-text", "Ninguno" }, { "data-none-selected-text", "Ninguno seleccionado" }, { "data-count-selected-text", "Seleccionados {0} de {1}" } })
            </div>
        </div>
        <div class="col-md-2">
            <label>@PresentationAdminStrings.Reports_Conciliation_Origin</label>
            <div class="selectMask w100">
                @Html.DropDownListFor(model => model.Origin, EnumHelpers.ConvertToSelectList(typeof(ConciliationOriginDto), EnumsStrings.ResourceManager), "Todos", new Dictionary<string, object> { { "style", "width: 100%; height: 100%; color:#999" }, { "class", "search_init form-control" } })
            </div>
        </div>
        <div class="col-md-3">
            <label>@PresentationAdminStrings.Email</label>
            <div class="selectMask w100">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control w100", })
            </div>
        </div>
        <div class="col-md-3">
            <label>@PresentationAdminStrings.Comments</label>
            <div class="selectMask w100">
                @Html.TextBoxFor(m => m.Comments, new { @class = "form-control w100", })
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="col-xs-6 p5l pr0">
                <a class="btn btn-default btn-standar mt10 w100" id="execute">@PresentationCoreMessages.Common_Execute</a>
            </div>
        </div>
    </div>
    <br />
}

<div class="greenCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_Ok</span>
<div class="yellowCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_Error</span>
<div class="redCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_NotFound</span>
<div class="blueCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_Checked</span>
<div class="greyCircle"></div> <span class="circleReference">@PresentationAdminStrings.Reports_Conciliation_State_DoesNotApply</span>

<div class="row">
    <div class="col-lg-12">
        <div class="table-responsive">
            <table id="table" class="table table-bordered table-striped table-hover tablesorter">
                <thead>
                    <tr>
                        <th colspan="4" style="text-align: center" class="background-gray border-bottom-white">
                            @PresentationAdminStrings.Reports_Conciliation_Portal
                        </th>
                        <th style="text-align: center" class="background-white border-bottom-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Cybersource
                        </th>
                        <th colspan="2" style="text-align: center" class="background-gray border-bottom-white">
                            @PresentationAdminStrings.Reports_Conciliation_Gateway
                        </th>
                        <th style="text-align: center" class="background-white border-bottom-gray">
                            @PresentationAdminStrings.Reports_Conciliation_VisaNetTC33
                        </th>
                        <th style="text-align: center" class="background-white border-bottom-gray">
                            @PresentationAdminStrings.Reports_Conciliation_Batch
                        </th>
                        <th style="text-align: center" class="background-gray border-bottom-white">
                            @PresentationAdminStrings.Reports_Conciliation_GeneralState
                        </th>
                        <th class="background-white"></th>
                    </tr>
                    <tr>
                        <th class="background-gray border-right-white">
                            @PresentationAdminStrings.Reports_Conciliation_Date
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_TransactionNumber
                        </th>
                        <th class="background-gray">
                            Número de transacción para pasarela
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_State
                        </th>
                        <th>
                            @PresentationAdminStrings.Reports_Conciliation_State
                        </th>
                        <th class="background-gray border-right-white">
                            @PresentationAdminStrings.Reports_Conciliation_Gateway
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_State
                        </th>
                        <th>
                            @PresentationAdminStrings.Reports_Conciliation_State
                        </th>
                        <th>
                            @PresentationAdminStrings.Reports_Conciliation_State
                        </th>
                        <th class="background-gray">
                            @PresentationAdminStrings.Reports_Conciliation_State
                        </th>
                        <th>Detalle</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<div id="divLbDetails"></div>

<script type="text/javascript">

    var oTable;
    $(document).ready(function () {

        $('#Applications').selectpicker();

        $('#State').selectpicker();

        @if (ViewBag.Apps == null || ViewBag.States == null)
        {
            <text>
        $('#State').selectpicker('selectAll');
        $('#Applications').selectpicker('selectAll');
        </text>
        }

        function externalFilters(aoData) {
            aoData.push({ "name": "From", "value": $("#@Html.IdFor(m=>m.From)").val() });
            aoData.push({ "name": "To", "value": $("#@Html.IdFor(m=>m.To)").val() });
            aoData.push({ "name": "RequestId", "value": $("#@Html.IdFor(m=>m.RequestId)").val() });
            aoData.push({ "name": "UniqueIdenfifier", "value": $("#@Html.IdFor(m => m.UniqueIdenfifier)").val() });
            aoData.push({ "name": "Comments", "value": $("#@Html.IdFor(m => m.Comments)").val() });
            aoData.push({ "name": "State", "value": $("#@Html.IdFor(m => m.State)").val() });
            aoData.push({ "name": "Applications", "value": $("#@Html.IdFor(m => m.Applications)").val() });
            aoData.push({ "name": "Origin", "value": $("#@Html.IdFor(m => m.Origin)").val() });
            aoData.push({ "name": "Email", "value": $("#@Html.IdFor(m => m.Email)").val() });
        }

        function drawTable() {
            oTable = applyDatatableExternalFiltersDisplay($('#table'),
                null,
                [
                    {
                        "mDataProp": "Date",
                        "bSearchable": false,
                        "bSortable": false,
                    },
                    {
                        "mDataProp": "TransactionNumber",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (a) {
                            if (a.aData.TransactionType == '@((int)TransactionType.Payment)') {
                                return "<a target='_blank' href='@Url.Action("Index", "ReportsTransactions")?PaymentTransactionNumber=" + a.aData.TransactionNumber +
                                    '&dateFrom=' + a.aData.Date + '&dateTo=' + a.aData.Date + "'>" + a.aData.TransactionNumber + "</a>";
                            } else {
                                if (a.aData.TransactionType == '@((int) TransactionType.Refund)') {
                                    return a.aData.TransactionNumber + " (Refund)";
                                } else {
                                    return a.aData.TransactionNumber;
                                }
                            }
                        }
                    },
                    {
                        "mDataProp": "UniqueIdenfifier",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (a) {
                            if (a.aData.TransactionType == '@((int)TransactionType.Payment)') {
                                return "<a target='_blank' href='@Url.Action("Index", "ReportsTransactions")?PaymentGatewayTransactionNumber=" + a.aData.UniqueIdenfifier +
                                    '&dateFrom=' + a.aData.Date + '&dateTo=' + a.aData.Date + "'>" + a.aData.UniqueIdenfifier + "</a>";
                            } else {
                                return a.aData.UniqueIdenfifier;
                            }
                        }
                    },
                    {
                        "sName": "ConciliationPortalState",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            if (oObj.aData.ConciliationPortalState == '@((int)ConciliationStateDto.Ok)')
                                return '<div class="greenCircle no-pointer"></div>';
                            if (oObj.aData.ConciliationPortalState == '@((int)ConciliationStateDto.Difference)')
                                return '<div class="yellowCircle no-pointer"></div>';
                            if (oObj.aData.ConciliationPortalState == '@((int)ConciliationStateDto.NotFound)')
                                return '<div class="redCircle no-pointer"></div>';
                            if (oObj.aData.ConciliationPortalState == '@((int)ConciliationStateDto.Checked)')
                                return '<div class="blueCircle no-pointer"></div>';
                            if (oObj.aData.ConciliationPortalState == '@((int) ConciliationStateDto.DoesNotApply)')
                                return '<div class="greyCircle no-pointer"></div>';
                            return null;
                        }
                    },
                    {
                        "sName": "CybersourceState",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            if (oObj.aData.CybersourceState == '@((int)ConciliationStateDto.Ok)')
                                return '<div class="greenCircle no-pointer"></div>';
                            if (oObj.aData.CybersourceState == '@((int)ConciliationStateDto.Difference)')
                                return '<div class="yellowCircle no-pointer"></div>';
                            if (oObj.aData.CybersourceState == '@((int)ConciliationStateDto.NotFound)')
                                return '<div class="redCircle no-pointer"></div>';
                            if (oObj.aData.CybersourceState == '@((int)ConciliationStateDto.Checked)')
                                return '<div class="blueCircle no-pointer"></div>';
                            if (oObj.aData.CybersourceState == '@((int) ConciliationStateDto.DoesNotApply)')
                                return '<div class="greyCircle no-pointer"></div>';
                            return null;
                        }
                    },
                    {
                        "mDataProp": "Gateway",
                        "bSearchable": false,
                        "bSortable": false,
                    },
                    {
                        "sName": "GatewayState",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {

                            if (oObj.aData.GatewayState == '@((int) ConciliationStateDto.Ok)')
                                return '<div class="greenCircle no-pointer"></div>';
                            if (oObj.aData.GatewayState == '@((int) ConciliationStateDto.Difference)')
                                return '<div class="yellowCircle no-pointer"></div>';
                            if (oObj.aData.GatewayState == '@((int) ConciliationStateDto.NotFound)')
                                return '<div class="redCircle no-pointer"></div>';
                            if (oObj.aData.GatewayState == '@((int) ConciliationStateDto.Checked)')
                                return '<div class="blueCircle no-pointer"></div>';
                            if (oObj.aData.GatewayState == '@((int) ConciliationStateDto.DoesNotApply)')
                                return '<div class="greyCircle no-pointer"></div>';
                            return null;
                        }
                    },
                    {
                        "sName": "VisaNetState",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {

                            if (oObj.aData.VisaNetState == '@((int) ConciliationStateDto.Ok)')
                                return '<div class="greenCircle no-pointer"></div>';
                            if (oObj.aData.VisaNetState == '@((int) ConciliationStateDto.Difference)')
                                return '<div class="yellowCircle no-pointer"></div>';
                            if (oObj.aData.VisaNetState == '@((int) ConciliationStateDto.NotFound)')
                                return '<div class="redCircle no-pointer"></div>';
                            if (oObj.aData.VisaNetState == '@((int) ConciliationStateDto.Checked)')
                                return '<div class="blueCircle no-pointer"></div>';
                            if (oObj.aData.VisaNetState == '@((int) ConciliationStateDto.DoesNotApply)')
                                return '<div class="greyCircle no-pointer"></div>';
                            return null;
                        }
                    },
                    {
                        "sName": "BatchState",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {

                            if (oObj.aData.BatchState == '@((int) ConciliationStateDto.Ok)')
                                return '<div class="greenCircle no-pointer"></div>';
                            if (oObj.aData.BatchState == '@((int) ConciliationStateDto.Difference)')
                                return '<div class="yellowCircle no-pointer"></div>';
                            if (oObj.aData.BatchState == '@((int) ConciliationStateDto.NotFound)')
                                return '<div class="redCircle no-pointer"></div>';
                            if (oObj.aData.BatchState == '@((int) ConciliationStateDto.Checked)')
                                return '<div class="blueCircle no-pointer"></div>';
                            if (oObj.aData.BatchState == '@((int) ConciliationStateDto.DoesNotApply)')
                                return '<div class="greyCircle no-pointer"></div>';
                            return null;
                        }
                    },
                    {
                        "sName": "State",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            if (oObj.aData.State == '@((int)ConciliationStateDto.Ok)')
                                return '<div class="greenCircle no-pointer"></div>';
                            if (oObj.aData.State == '@((int)ConciliationStateDto.Difference)')
                                return '<div class="yellowCircle no-pointer"></div>';
                            if (oObj.aData.State == '@((int)ConciliationStateDto.NotFound)')
                                return '<div class="redCircle no-pointer"></div>';
                            if (oObj.aData.State == '@((int)ConciliationStateDto.Checked)')
                                return '<div class="blueCircle no-pointer"></div>';
                            if (oObj.aData.State == '@((int) ConciliationStateDto.DoesNotApply)')
                                return '<div class="greyCircle no-pointer"></div>';

                        }
                    },
                    {
                        "sName": "Details",
                        "sClass": "column-icon",
                        "sDefaultContent": "",
                        "bSearchable": false,
                        "bSortable": false,
                        "fnRender": function (oObj) {
                            return '<a href="ReportsConciliation/Details/' + oObj.aData.ConciliationSummaryId + '" class="btnDetails"><i class="fa fa-search"></i></a>';
                        }
                    }
                ],
                '@Url.Action("AjaxHandler", "ReportsConciliation")', externalFilters, [[0, "desc"]], null, 100);
        }

        $("#execute").click(function (e) {
            e.preventDefault
            drawTable();
            oTable.fnFilter();
        });

        $("#table").on("click", ".btnDetails", function (e) {
            e.preventDefault();

            $.post($(this).attr("href"), function (data) {
                if (data.ResponseType == RESPONSE.SUCCESS) {
                    $("#divLbDetails").html(data.Content);

                    $("#lbDetails").modal();
                }
                if (data.ResponseType == RESPONSE.ERROR) {
                    ShowNotification(data.Title, data.Message, 'error');
                }
            });
        });

        @if (ViewBag.Apps != null && ViewBag.States != null)
        {
            <text>
        $('#Applications').selectpicker("@ViewBag.Apps");
        $('#State').selectpicker("@ViewBag.States");
        </text>
        }

    });

</script>